[{"title":"Vuepress(2.x) config.ts base根目录配置和问题解决","path":"//Vuepress config.ts根目录配置和问题解决/","content":"介绍与js格式文件不同，ts的base配置仅需一行 js配置格式： 123module.exports = &#123;base:&#x27;/&#x27;,&#125; ts配置格式： 1234export default defineUserconfig(&#123;base : &#x27;/&#x27;,//下面是其他配置&#125;) 如果在ts中使用了js格式，代码不会报错，IDE也不会提示，但是会导致base配置问题 问题表现如下home界面标题和介绍变为默认样式 菜单栏消失 解决方案把js格式的base配置文件删除，在ts的config里添加base，重启本地调试服务器 网页已经可以正常浏览! 如果遇到问题请在下方的联系方式里联系我 使用请遵守MIT协议"},{"title":"Vuepress使用重定向解决默认语言问题","path":"//Vuepress使用重定向解决默认语言问题/","content":"前言Vuepress 默认情况下使用/作为默认语言路径，这导致默认语言文件在文件层级上会比其他语言的文件高一级（下图），影响美观和维护，本教程将使用vuepress-plugin-locale-redirect插件修复此问题。 12345678910docs├─ README.md├─ foo.md├─ nested│ └─ README.md└─ zh ├─ README.md ├─ foo.md └─ nested └─ README.md 修改为： 12345678910111213141516docs├─ zh│ ├─ README.md│ ├─ foo.md│ └─ nested│ └─ README.md├─ en│ ├─ README.md│ ├─ foo.md│ └─ nested│ └─ README.md└─ ja ├─ README.md ├─ foo.md └─ nested └─ README.md 开始配置步骤一: cd到你的vuepress程序目录 步骤二：在终端中使用npm安装vuepress-plugin-locale-redirect插件，如果你使用的是其他包管理软件，那么将npm指令更换为你的包管理软件即可 1npm vuepress-plugin-locale-redirect 步骤三：在config.js(ts)文件头中添加引用插件 1import &#123; localeRedirectPlugin &#125; from &#x27;vuepress-plugin-locale-redirect&#x27; 步骤四：在config的网页设置文件中添加引用（我这里用的是ts格式，如果你用的是js的话，应该是module.exports = &#123;&#125;这种格式），不要直接复制粘贴，参考你本地的代码做修改。也可以参考完整示例代码（有bug，请勿直接复制其他区域） 123456789101112131415161718192021222324252627export default defineUserConfig(&#123; title: &#x27;示例文件&#x27;, description: &#x27;示例文件源码&#x27;, //引用插件 plugins: [ // @ts-ignore localeRedirectPlugin(), ], //添加路径 locales: &#123; //写在最上方的语言将被认为是默认语言 &#x27;/zh/&#x27;: &#123; lang: &#x27;zh-CN&#x27;, title: &#x27;&#x27;, description: &#x27;&#x27;, &#125;, &#x27;/en/&#x27;: &#123; lang: &#x27;en-US&#x27;, title: &#x27;&#x27;, description: &#x27;&#x27;, &#125;, &#x27;/ja/&#x27;: &#123; lang: &#x27;日本语&#x27;, title: &#x27;&#x27;, description: &#x27;&#x27;, &#125;, &#125;, 完成～ 如果要为主题，例如下拉菜单设置多语言，可参考官方文档，将其中的/改为你想要的默认语言即可 如果遇到问题请在下方的联系方式里联系我 使用请遵守MIT协议"},{"title":"vscode git提示99+的解决方法","path":"//vscgiterror001/","content":"有一次手贱不小心git init的时候出错了，于是vscode侧边栏的git就一直提示99+ 一打开发现整个usr(用户)文件夹下的内容都被扫描了，不说废话，上解决方法 打开终端，cd到出问题的文件夹，输入ls -a 查看父&#x2F;子文件夹是否有.git文件，然后输入并执行 1rm -rf .git 如果报错就在前缀加一个 [sudo] （可能要输入密码） 千 万 不 要 只 输 入 rm -rf !!!!!!!!!"},{"title":"M1 MacBook 配置dosbox-x环境（dos汇编debug,MASM环境搭建）","path":"//m1armdos001/","content":"1.下载dosbox-x用浏览器访问此网址获取下载请求https://github.com/joncampbell123/dosbox-x/releases/download/dosbox-x-v0.83.19/dosbox-x-macosx-arm64-20211101100925.zip先不要急着解压，文件等会再操作 2.下载MASM用浏览器访问此网址获取下载请求（需要梯子）https://drive.google.com/drive/folders/1rFLz8Vpfu_p_UoYAbqPlISU_Qmk_OvHI?usp=sharing下载完成后把这两个文件复制到同一个文件夹并解压（记得删除zip包） 3.配置磁盘点击顶部的drive按钮 选择C盘并选择从文件夹挂载 选取MASM路径 进入C盘符 使用dir命令列出磁盘内的文件，如果挂载成功则如下图 输入masm命令，已经可以正常使用 提示：由于macos安全性限制每次打开都需要手动挂载一次"},{"title":"powerlevel10k 去除用户名或主机名显示","path":"//powerlevel10k 去除用户名或主机名显示/","content":"如果你不关心过程只想看解决方案请点击这里跳转 过程因为zsh默认会显示用户名，而我的用户名用的是真实姓名，所以为了隐私需要隐藏，在bing了一下之后找到了个修改主题文件的解决方法，我按照教程放到了~/.zshrc里，但是没有生效（这里挖个坑） 教程链接 我看到了部分其他教程是将prompt_context() 放在主题文件中，但是我复制到主题文件后仍然无效 这个过程中顺带发现我的主题地址和其他教程里的不一样，其他教程里的主题文件路径是在 1~/.oh-my-zsh/themes/xxx.zsh-theme 而我是在 1~/.oh-my-zsh/custom/themes/powerlevel10k/powerlevel10k.zsh-theme 因而进一步发现了我没有首次配置后自动生成的~/.p10k文件，因为我的所有powerlevel10k自定义主题设置都是放在~.zhsrc的（我是按照这个教程直接设置我的终端 教程链接） 开始确认要编写的文件确实是.zshrc没错后，怀疑是不是.zshrc的函数声明漏写了；教程中因为是直接放在主题文件下所以默认是函数，我没有修改直接复制到.zshrc，但是加上之后依然没有生效 我回看了第一个教程，确实是没有写声明的，问题很明显不是关于prompt_context() &#123;&#125;函数设置的 再进一步查找，我在p10k官网仓库的How do I add username and&#x2F;or hostname to prompt?设置介绍下发现了一个名为 POWERLEVEL9K_LEFT_PROMPT_ELEMENTS的prompt设置函数（prompt在这里应该是提示符的意思，这里得吐槽下微软的蹩脚翻译，把prompt翻译为了“令人惊叹的”😅） 在我的.zshrc文件中查找这条函数，内容为： 1POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(user device virtualenv dir vcs newline prompt_char) 按照函数名，这些形参显然就是左边显示的内容 按照顺序，可以发现user&#x3D; 用户名 device&#x3D;主机名 现在知道了参数属性，只需要按照需要修改就好了，这里我希望只删除用户名，所以改为 12#删除userPOWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(device virtualenv dir vcs newline prompt_char) 然后重载zsh使配置生效 12#终端输入zsh 完成！ 解决方法首先查看是否有~/.p10k文件 123456# 将此命令复制到终端中运行if ls ~/.p10k &gt;/dev/null 2&gt;&amp;1;then echo &quot;文件存在&quot; else echo &quot;文件不存在&quot; fi 如果有则在 .p10k文件中进行操作，如果没有则像我一样在.zshrc中进行操作 123456789101112##找到并修改 POWERLEVEL9K_LEFT_PROMPT_ELEMENTS 设置POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(user device virtualenv dir vcs newline prompt_char)# 如果要只显示用户名POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(device virtualenv dir vcs newline prompt_char)# 如果要只显示主机名POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(user virtualenv dir vcs newline prompt_char)# 如果要两个都不显示POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(virtualenv dir vcs newline prompt_char)## 使配置生效# 终端运行以重新载入zshzsh enjoy p10K!","tags":["美化"]},{"path":"/images/AboutMe.html","content":"使用本地图片加载进行加速"},{"path":"/post_masterplate/标签组件模版.html","content":"(官方教程)[标签插件（Tag） | Hexo](steller教程)[Stellar：使用标签插件增强阅读体验 - XAOXUU] 示例教程文档官方教程文档title: 标签插件（Tag）标签插件帮助开发者在文章中快速插入内容。 概要12hexo.extend.tag.register(name, function(args, content)&#123;&#125;, options); 标签函数会传入两个参数：args 和 content，前者代表开发者在使用标签插件时传入的参数，而后者则是标签插件所覆盖的内容。 从 Hexo 3 开始，因为新增了非同步渲染功能，而改用 Nunjucks 作为渲染引擎，其行为可能会与过去使用的 Swig 有些许差异。 移除标签插件使用 unregister() 来用自定义函数替换现有的 标签插件。 1hexo.extend.tag.unregister(name); 示例 123456789const tagFn = (args, content) =&gt; &#123; content = &#x27;something&#x27;; return content;&#125;;// https://hexo.io/docs/tag-plugins#YouTubehexo.extend.tag.unregister(&#x27;youtube&#x27;);hexo.extend.tag.register(&#x27;youtube&#x27;, tagFn); 选项ends使用结束标签，此选项默认为 false。 async开启非同步模式，此选项默认为 false。 范例没有结束标签插入 Youtube 影片。 1234hexo.extend.tag.register(&#x27;youtube&#x27;, function(args)&#123; var id = args[0]; return &#x27;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/&#x27; + id + &#x27;&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&#x27;;&#125;); 有结束标签插入 pull quote。 1234hexo.extend.tag.register(&#x27;pullquote&#x27;, function(args, content)&#123; var className = args.join(&#x27; &#x27;); return &#x27;&lt;blockquote class=&quot;pullquote&#x27; + className + &#x27;&quot;&gt;&#x27; + content + &#x27;&lt;/blockquote&gt;&#x27;;&#125;, &#123;ends: true&#125;); 非同步渲染插入文件。 1234567891011var fs = require(&#x27;hexo-fs&#x27;);var pathFn = require(&#x27;path&#x27;);hexo.extend.tag.register(&#x27;include_code&#x27;, function(args)&#123; var filename = args[0]; var path = pathFn.join(hexo.source_dir, filename); return fs.readFile(path).then(function(content)&#123; return &#x27;&lt;pre&gt;&lt;code&gt;&#x27; + content + &#x27;&lt;/code&gt;&lt;/pre&gt;&#x27;; &#125;);&#125;, &#123;async: true&#125;); Front-matter 和用户配置以下任何选项都是有效的： 1234567891011121314151617181920hexo.extend.tag.register(&#x27;foo&#x27;, function (args) &#123; const [firstArg] = args; // User config const &#123; config &#125; = hexo; const editor = config.author + firstArg; // Theme config const &#123; config: themeCfg &#125; = hexo.theme; if (themeCfg.fancybox) // do something... // Front-matter const &#123; title &#125; = this; // article&#x27;s (post/page) title // Article&#x27;s content const &#123; _content &#125; = this; // original content const &#123; content &#125; = this; // HTML-rendered content return &#x27;foo&#x27;;&#125;); index.js1hexo.extend.tag.register(&#x27;foo&#x27;, require(&#x27;./lib/foo&#x27;)(hexo)); lib/foo.js123456789101112131415module.exports = hexo =&gt; &#123; return function fooFn(args) &#123; const [firstArg] = args; const &#123; config &#125; = hexo; const editor = config.author + firstArg; const &#123; config: themeCfg &#125; = hexo.theme; if (themeCfg.fancybox) // do something... const &#123; title, _content, content &#125; = this; return &#x27;foo&#x27;; &#125;;&#125;; strller教程文档"},{"title":"测试标题1","path":"/post_masterplate/文章自定义模版.html","content":"封面如果您想使用 Unsplash 搜索图片作为封面，可以在 cover 设置搜索关键词（用英文逗号隔开）： blog&#x2F;source&#x2F;_posts&#x2F;xxx.mdcover: workout,stravabanner如果您想使用 Unsplash 搜索图片作为横幅，可以在 banner 中设置搜索关键词（用英文逗号隔开）： blog&#x2F;source&#x2F;_posts&#x2F;xxx.mdbanner: workout,strava摘要手动设置摘要一篇文章开头一段文字描述就是摘要，摘要和正文用 隔开，前后一定要有空行。例如： blog&#x2F;source&#x2F;_posts&#x2F;xxx.mdcover: &#x2F;assets&#x2F;xaoxuu&#x2F;blog&#x2F;&#50;&#48;&#x32;&#x30;&#x2d;&#x30;&#57;&#50;&#x37;&#x61;&#64;&#x31;&#x78;&#x2e;&#115;&#x76;&#103;在心率管家默默无闻地上线了一年多之后，现在终于打算来好好聊聊关于手机摄像头测量心率的那些事。本文参考了很多前辈的文章，将在文末列出。 后面是正文部分，在主页看不到。 参考资料填写引用文章的标题和链接： references: - title: ‘心跳之旅—💗—iOS用手机摄像头检测心率(PPG)’ url: https://punmy.cn/2016/07/28/15231176397746.html - title: ‘PPG光电容积脉搏波描记法技术概况’ url: https://www.jianshu.com/p/695c131abfa5 …效果见这篇文章：https://xaoxuu.com/blog/20200927/#references","tags":[null,null],"categories":[null,null]},{"path":"/baidu_verify_codeva-smyzZvfkl8.html","content":"bab81e1f9b25346af7bee052f07f14f4"}]